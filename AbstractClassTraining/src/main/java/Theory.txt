Абстрактные классы могут использоваться для различных целей в Java. Вот несколько типичных сценариев:

1. Создание общего интерфейса: Абстрактные классы могут служить для создания общего интерфейса для группы классов.
Например, в нашем примере с животными, Animal может быть абстрактным классом, предоставляющим общие методы для всех
животных, такие как makeSound(), eat(), move(), и т.д.

2. Предоставление реализации по умолчанию: Абстрактные классы могут содержать как абстрактные методы, так и
реализованные методы. Реализованные методы могут предоставлять базовую функциональность, которую подклассы могут
переопределить по своему усмотрению. Например, в абстрактном классе Animal мы можем предоставить реализацию
метода move(), который будет использоваться по умолчанию, но его можно будет переопределить в подклассах,
если требуется специфическое поведение для конкретного вида животного.

3. Сокрытие деталей реализации: Абстрактные классы могут использоваться для сокрытия деталей реализации.
Подклассы реализуют абстрактные методы без необходимости знать, как именно они реализованы в суперклассе.
Это способствует уменьшению связности кода и облегчает его сопровождение.

4. Расширяемость: Абстрактные классы позволяют легко добавлять новые функции и поведения, расширяя иерархию классов.
Если у нас есть новый вид животного, мы можем просто создать новый подкласс Animal и реализовать его специфические
методы, не затрагивая существующий код.

5. Повторное использование кода: Абстрактные классы помогают избежать дублирования кода. Общая функциональность может
быть вынесена в абстрактный класс, что упрощает поддержку и обновление кода.

Таким образом, абстрактные классы предоставляют удобный механизм для организации кода, повышения его гибкости и
обеспечения четкой структуры программы.